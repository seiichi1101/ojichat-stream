// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package ojichat

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// OjichatClient is the client API for Ojichat service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OjichatClient interface {
	Chat(ctx context.Context, opts ...grpc.CallOption) (Ojichat_ChatClient, error)
}

type ojichatClient struct {
	cc grpc.ClientConnInterface
}

func NewOjichatClient(cc grpc.ClientConnInterface) OjichatClient {
	return &ojichatClient{cc}
}

func (c *ojichatClient) Chat(ctx context.Context, opts ...grpc.CallOption) (Ojichat_ChatClient, error) {
	stream, err := c.cc.NewStream(ctx, &Ojichat_ServiceDesc.Streams[0], "/ojichat.Ojichat/Chat", opts...)
	if err != nil {
		return nil, err
	}
	x := &ojichatChatClient{stream}
	return x, nil
}

type Ojichat_ChatClient interface {
	Send(*ChatRequest) error
	Recv() (*ChatResponse, error)
	grpc.ClientStream
}

type ojichatChatClient struct {
	grpc.ClientStream
}

func (x *ojichatChatClient) Send(m *ChatRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *ojichatChatClient) Recv() (*ChatResponse, error) {
	m := new(ChatResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// OjichatServer is the server API for Ojichat service.
// All implementations must embed UnimplementedOjichatServer
// for forward compatibility
type OjichatServer interface {
	Chat(Ojichat_ChatServer) error
	mustEmbedUnimplementedOjichatServer()
}

// UnimplementedOjichatServer must be embedded to have forward compatible implementations.
type UnimplementedOjichatServer struct {
}

func (UnimplementedOjichatServer) Chat(Ojichat_ChatServer) error {
	return status.Errorf(codes.Unimplemented, "method Chat not implemented")
}
func (UnimplementedOjichatServer) mustEmbedUnimplementedOjichatServer() {}

// UnsafeOjichatServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OjichatServer will
// result in compilation errors.
type UnsafeOjichatServer interface {
	mustEmbedUnimplementedOjichatServer()
}

func RegisterOjichatServer(s grpc.ServiceRegistrar, srv OjichatServer) {
	s.RegisterService(&Ojichat_ServiceDesc, srv)
}

func _Ojichat_Chat_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(OjichatServer).Chat(&ojichatChatServer{stream})
}

type Ojichat_ChatServer interface {
	Send(*ChatResponse) error
	Recv() (*ChatRequest, error)
	grpc.ServerStream
}

type ojichatChatServer struct {
	grpc.ServerStream
}

func (x *ojichatChatServer) Send(m *ChatResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *ojichatChatServer) Recv() (*ChatRequest, error) {
	m := new(ChatRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Ojichat_ServiceDesc is the grpc.ServiceDesc for Ojichat service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Ojichat_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ojichat.Ojichat",
	HandlerType: (*OjichatServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Chat",
			Handler:       _Ojichat_Chat_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "ojichat.proto",
}
